buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
        springCloudVersion = 'Finchley.RC2'
    }
    repositories {
        //mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.springspring-boot-starter-security.io/milestone" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

configure(allprojects) { project ->
    group = "com.store"
    version = version

    ext.springCloudVersion                  = 'Finchley.RC2'
    ext.springBootVersion                   = '2.0.3.RELEASE'
    ext.junitVersion                        = '4.12'
    ext.mysqlVersion                        = '8.0.11'
    ext.springBootMyBatisVersion            = '1.3.2'
    ext.springBootPagehelperVersion         = '1.2.5'
    ext.springBootDruidVersion              = '1.1.9'
    ext.lombokVersion                       = '1.16.20'
    ext.gsonVersion                         = '2.8.2'
    ext.springBootAdminVersion              = '1.5.0'
    ext.hutoolAllVersion                    = '4.0.10'
    ext.jjwtVersion                         = '0.9.0'
    ext.fastjsonVersion                     = '1.2.47'
    ext.mapperVersion                       = '4.0.2'
    ext.persistenceApiVersion               = '1.0.2'
    ext.commonsLang3Version                 = '3.7'
    ext.mybatisplusSpringBootStarterVersion = '1.0.5'
    ext.mybatisPlusVersion                  = '2.1.9'
    ext.transmittableThreadLocalVersion     = '2.2.0'
    ext.springfoxSwaggerUiVersion           = '2.8.0'
    ext.springfoxSwagger2Version            = '2.8.0'
    ext.springCloudZuulRatelimitVersion     = '1.7.2'
    ext.jasyptSprinBbootStarterVersion      = '1.18'
//    ext.springSecurityCryptoVersion         = '5.0.6'
    ext.commonsIoVersion                    = '2.6'
    ext.springCloudStarterBusAmqpVersion    = '2.0.0'
    ext.kaptchaVersion                      = '0.0.9'


    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven'


    if (!(name.contains('common'))) {
        apply plugin: 'org.springframework.boot'
    }
//    apply plugin: 'docker'

    repositories {
        //mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        if (!(name.contains('common'))) {
            testCompile("org.springframework.boot:spring-boot-starter-test")
            testCompile("junit:junit:${junitVersion}")
        }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
//            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"

        }
    }
//    if (!((name.contains('common')) || (name.contains('api'))  || (name == 'microservice-store-cloud'))) {
//        task buildDocker(type: Docker, dependsOn: bootRepackage) {
//            push = true
//            registry = dockerRegistry
//            applicationName = jar.baseName
//            dockerfile = file('Dockerfile')
//            doFirst {
//                copy {
//                    from jar
//                    into stageDir
//                }
//            }
//        }
//    }

//    if (name.contains('api')) {
//        tasks.remove(bootRepackage)
//    }

}

project("microservice-store-web-admin") {
    description = "microservice-store-web-admin"

    dependencies {
        compile(project(":microservice-store-common"))
        compile(project(":microservice-store-service-user-api"))
        compile(project(":microservice-store-service-product-api"))
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
//        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project("microservice-store-service-user-api") {
    description = "microservice-store-service-user-api"

    dependencies {
        compile(project(":microservice-store-common"))
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        //compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    }
}

project("microservice-store-service-user") {
    description = "microservice-store-service-user"

    dependencies {
        compile(project(":microservice-store-service-user-api"))
        compile(project(":microservice-store-common"))
        compile(project(":microservice-store-common-mapper"))
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-hystrix")
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-zipkin', version: '2.0.0.RELEASE'
        compile("com.github.axet:kaptcha:${kaptchaVersion}")


    }
}

project("microservice-store-eureka") {
    description = "microservice-store-eureka"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
//        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project("microservice-store-zuul") {
    description = "microservice-store-zuul"

    dependencies {
        compile(project(":microservice-store-common"))
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
        compile("org.springframework.cloud:spring-cloud-starter-oauth2")
        compile("io.springfox:springfox-swagger-ui:${springfoxSwaggerUiVersion}")
//        compile("com.marcosbarbero.cloud:spring-cloud-zuul-ratelimit:${springCloudZuulRatelimitVersion}")
        compile group: 'com.marcosbarbero.cloud', name: 'spring-cloud-zuul-ratelimit-core', version: '1.7.2.RELEASE'

//        compile("org.springframework.cloud:spring-cloud-starter-security")

//        compile("org.springframework.boot:spring-boot-devtools")
//        compile("org.springframework.cloud:spring-cloud-starter-vault-config")
        //        <dependency>
        //            <groupId>org.springframework.security</groupId>
        //            <artifactId>spring-security-data</artifactId>
        //        </dependency>
//        compile("org.springframework.boot:spring-boot-starter-web")   <groupId>org.springframework.boot</groupId>
//            <artifactId>spring-boot-devtools</artifactId>  compile group: 'cn.hutool', name: 'hutool-all', version: '4.0.10'
    }
}

project("microservice-store-common-mapper") {
    description = "microservice-store-common-mapper"

    dependencies {
        compile(project(":microservice-store-common"))
        compile("mysql:mysql-connector-java")
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter")
        compile("com.github.pagehelper:pagehelper-spring-boot-starter:${springBootPagehelperVersion}")
        compile("com.alibaba:druid-spring-boot-starter:${springBootDruidVersion}")
        compile("tk.mybatis:mapper:${mapperVersion}")
        compile("com.baomidou:mybatisplus-spring-boot-starter:${mybatisplusSpringBootStarterVersion}")
        compile("com.baomidou:mybatis-plus:${mybatisPlusVersion}")

//        compile("tk.mybatis:mapper-spring-boot-starter")

//        compile group: 'javax.persistence', name: 'persistence-api', version: '1.0.2'
    }
}

project("microservice-store-common") {
    description = "microservice-store-common"

    dependencies {
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.boot:spring-boot-starter-data-redis")
        compile("org.apache.commons:commons-lang3:${commonsLang3Version}")
        compile("org.projectlombok:lombok:${lombokVersion}")
        compile("com.google.code.gson:gson:${gsonVersion}")
        compile("cn.hutool:hutool-all:${hutoolAllVersion}")
        compile("io.jsonwebtoken:jjwt:${jjwtVersion}")
        compile("com.alibaba:fastjson:${fastjsonVersion}")
        compile("javax.persistence:persistence-api:${persistenceApiVersion}")
//        compile("com.baomidou:mybatisplus-spring-boot-starter:${mybatisplusSpringBootStarterVersion}")
//        compile("com.baomidou:mybatis-plus:${mybatisPlusVersion}")
        compile("com.alibaba:transmittable-thread-local:${transmittableThreadLocalVersion}")
        compile("com.baomidou:mybatis-plus:${mybatisPlusVersion}")
        compile("io.springfox:springfox-swagger2:${springfoxSwagger2Version}")
        compile("com.github.ulisesbocchio:jasypt-spring-boot-starter:${jasyptSprinBbootStarterVersion}")
        compile("commons-io:commons-io:${commonsIoVersion}")
//        compile("org.springframework.cloud:spring-cloud-starter-bus-amqp:${springCloudStarterBusAmqpVersion}")


//        compile("org.springframework.security:spring-security-crypto:${springSecurityCryptoVersion}")


    }
}

project("microservice-store-auth") {
    description = "microservice-store-auth"

    dependencies {
        compile(project(":microservice-store-common"))
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        compile("org.springframework.cloud:spring-cloud-starter-oauth2")
        compile("org.springframework.cloud:spring-cloud-starter-security")
        compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: '2.3.2.RELEASE'
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')

        compile("mysql:mysql-connector-java")
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter")
        compile("com.github.pagehelper:pagehelper-spring-boot-starter:${springBootPagehelperVersion}")
        compile("com.alibaba:druid-spring-boot-starter:${springBootDruidVersion}")
        compile("tk.mybatis:mapper:${mapperVersion}")
        compile("com.baomidou:mybatisplus-spring-boot-starter:${mybatisplusSpringBootStarterVersion}")
        compile("com.baomidou:mybatis-plus:${mybatisPlusVersion}")

//        compile(project(":microservice-store-common-mapper"))

//        compile("org.springframework.security:spring-security-data")
//        compile('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure')

//        compile("org.springframework.boot:spring-boot-autoconfigure")
//        compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.0.1.RELEASE'
//        compile("org.springframework.boot:spring-boot-starter-data-jpa")

    }
}

project("microservice-store-service-product-api") {
    description = "microservice-store-service-product-api"

    dependencies {
        compile(project(":microservice-store-common"))
        compile('org.springframework.cloud:spring-cloud-starter-openfeign')
        //compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    }
}

project("microservice-store-service-product") {
    description = "microservice-store-service-product"

    dependencies {
        compile(project(":microservice-store-service-product-api"))
        compile(project(":microservice-store-common"))
        compile(project(":microservice-store-common-mapper"))
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    }
}

configure(rootProject) {
    description = "microservice-store-cloud"

//    dependencyManagement {
//        imports {
//            mavenBom "io.projectreactor:reactor-bom"
//        }
//        resolutionStrategy {
//            cacheChangingModulesFor 0, 'seconds'
//        }
//        applyMavenExclusions = false
//    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies {  // for integration tests
//        testCompile(project(":spring-aop"))

    }

//    task buildDocker(type: Docker, dependsOn: bootRepackage) {
//        push = true
//        applicationName = jar.baseName
//        dockerfile = file('Dockerfile')
//        doFirst {
//            copy {
//                from jar
//                into stageDir
//            }
//        }
//    }

}



