buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        springCloudVersion = 'Finchley.M9'
    }
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}

configure(allprojects) { project ->
    group = "com.store"
    version = version

    ext.springCloudVersion          = 'Finchley.M9'
    ext.springBootVersion           = '2.0.1.RELEASE'
    ext.junitVersion                = "4.12"
    ext.mysqlVersion                = "8.0.11"
    ext.springBootMyBatisVersion    = '1.3.2'
    ext.springBootpagehelperVersion = '1.2.5'
    ext.springBootDruidVersion      = '1.1.9'
    ext.lombokVersion               = "1.16.20"
    
    apply plugin: "java"
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven'


    if (!(name.contains('common'))) {
        apply plugin: 'org.springframework.boot'
    }
//    apply plugin: 'docker'

    repositories {
        //mavenCentral()
        mavenLocal()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        if (!(name.contains('common'))) {
            testCompile("org.springframework.boot:spring-boot-starter-test")
            testCompile("junit:junit:${junitVersion}")
        }
    }
    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"

        }
    }
//    if (!((name.contains('common')) || (name.contains('api'))  || (name == 'microservice-store-cloud'))) {
//        task buildDocker(type: Docker, dependsOn: bootRepackage) {
//            push = true
//            registry = dockerRegistry
//            applicationName = jar.baseName
//            dockerfile = file('Dockerfile')
//            doFirst {
//                copy {
//                    from jar
//                    into stageDir
//                }
//            }
//        }
//    }

//    if (name.contains('api')) {
//        tasks.remove(bootRepackage)
//    }

}

project(":microservice-store-eureka") {
    description = "microservice-store-eureka"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-server")
//        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project(":microservice-store-zuul") {
    description = "microservice-store-zuul"

    dependencies {
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul")
//        compile("org.springframework.boot:spring-boot-starter-security")
    }
}

project(":microservice-store-common") {
    description = "microservice-store-common"

    dependencies {
        compile("mysql:mysql-connector-java:${mysqlVersion}")
        compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:${springBootMyBatisVersion}")
        compile("com.github.pagehelper:pagehelper-spring-boot-starter:${springBootpagehelperVersion}")
        compile("com.alibaba:druid-spring-boot-starter:${springBootDruidVersion}")
        compileOnly("org.projectlombok:lombok:${lombokVersion}")

//        compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.9'

//        compile("org.springframework.cloud:spring-cloud-starter-netflix-zuul") compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'

    }
}

configure(rootProject) {
    description = "microservice-store-cloud"

//    dependencyManagement {
//        imports {
//            mavenBom "io.projectreactor:reactor-bom"
//        }
//        resolutionStrategy {
//            cacheChangingModulesFor 0, 'seconds'
//        }
//        applyMavenExclusions = false
//    }

    // don't publish the default jar for the root project
    configurations.archives.artifacts.clear()

    dependencies {  // for integration tests
//        testCompile(project(":spring-aop"))

    }

//    task buildDocker(type: Docker, dependsOn: bootRepackage) {
//        push = true
//        applicationName = jar.baseName
//        dockerfile = file('Dockerfile')
//        doFirst {
//            copy {
//                from jar
//                into stageDir
//            }
//        }
//    }

}



